{"version":3,"file":"react-native-activestorage.module.js","sources":["../src/lib/checksum.ts","../src/lib/directUpload.ts","../src/lib/createBlobRecord.ts","../src/Context.ts","../src/ActiveStorageProvider.tsx","../src/useDirectUpload.ts","../src/useConfig.ts","../src/lib/insertOrReplace.ts","../src/DirectUpload.tsx"],"sourcesContent":["import RNFetchBlob from 'rn-fetch-blob';\nimport { btoa } from 'abab';\n\nconst checksum = async ({ path }: { path: string }) => {\n  const md5 = await RNFetchBlob.fs.hash(path, 'md5');\n  const hexArray = md5.replace(/\\r|\\n/g, \"\")\n    .replace(/([\\da-fA-F]{2}) ?/g, \"0x$1 \")\n    .replace(/ +$/, \"\")\n    .split(\" \")\n    .map(it => parseInt(it));\n\n  const byteString = String.fromCharCode(...hexArray);\n\n  return btoa(byteString);\n}\n\nexport default checksum;\n","import RNFetchBlob, { FetchBlobResponse, StatefulPromise } from 'rn-fetch-blob';\nimport createBlobRecord from './createBlobRecord';\nimport { File, DirectUploadResult, HandleStatusUpdateData } from '../types';\n\nlet id = 0;\n\ninterface DirectUploadParams {\n  directUploadsUrl: string;\n  file: File;\n  headers?: object;\n  onStatusChange: (data: DirectUploadResult) => void;\n}\n\nconst directUpload = ({ directUploadsUrl, file, headers, onStatusChange }: DirectUploadParams) => {\n  const taskId = ++id;\n  let canceled = false;\n  let task: StatefulPromise<FetchBlobResponse>;\n\n  const handleCancel = () => {\n    if (!task) {\n      return;\n    }\n\n    canceled = true;\n    task.cancel();\n  };\n\n  const handleStatusUpdate = (data: HandleStatusUpdateData) => {\n    onStatusChange({ ...data, id: taskId, cancel: handleCancel, file });\n  };\n\n  handleStatusUpdate({ status: 'waiting' });\n\n  return new Promise<string | void>(async (resolve) => {\n    try {\n      const blobData = await createBlobRecord({\n        directUploadsUrl,\n        file,\n        headers,\n      });\n\n      const { url, headers: uploadHeaders } = blobData.direct_upload;\n\n      const fileData = RNFetchBlob.wrap(file.path);\n\n      task = RNFetchBlob.fetch('PUT', url, uploadHeaders, fileData);\n\n      task\n        .uploadProgress({ interval: 250 }, (uploadedBytes, totalBytes) => {\n          const progress = (uploadedBytes / totalBytes) * 100;\n          handleStatusUpdate({ status: 'uploading', progress, totalBytes, uploadedBytes });\n        })\n        .then((resp) => {\n          const status = resp.info().status;\n          if (status >= 200 && status < 400) {\n            handleStatusUpdate({ status: 'success', signed_id: blobData.signed_id });\n          } else {\n            handleStatusUpdate({ status: 'error', error: new Error('Response not success') });\n          }\n\n          resolve(blobData.signed_id);\n        })\n        .catch((err) => {\n          if (canceled) {\n            handleStatusUpdate({ status: 'canceled' });\n          } else {\n            handleStatusUpdate({ status: 'error', error: err });\n          }\n\n          resolve();\n        });\n    } catch (err) {\n      handleStatusUpdate({ status: 'error', error: err });\n      return resolve();\n    }\n  });\n};\n\nexport default directUpload;\n","import getChecksum from './checksum';\nimport { File } from '../types';\n\ninterface CreateBlobRecordParams {\n  directUploadsUrl: string;\n  file: File;\n  headers?: object;\n}\n\ninterface BlobParams {\n  filename: string;\n  content_type: string;\n  byte_size: number;\n  checksum: string;\n  metadata?: object;\n}\n\nconst createBlobRecord = async ({ directUploadsUrl, file, headers = {} }: CreateBlobRecordParams) => {\n  const checksum = await getChecksum({ path: file.path });\n\n  if (!checksum) {\n    throw new Error(`Failed to get file checksum. Path: ${file.path}`)\n  }\n\n  const params: BlobParams = {\n    filename: file.name,\n    content_type: file.type || 'image/jpeg',\n    byte_size: file.size,\n    checksum,\n  }\n\n  if (file.metadata) {\n    params.metadata = file.metadata;\n  }\n\n  const response = await fetch(directUploadsUrl, {\n    method: 'POST',\n    body: JSON.stringify({ blob: params }),\n    headers: { 'Content-Type': 'application/json', ...headers },\n  });\n\n  return response.json();\n}\n\nexport default createBlobRecord;\n","import { createContext } from 'react';\n\ntype ContextType = {\n  host: string;\n  mountPath?: string;\n  headers?: object;\n}\n\nconst defaultContext = {\n  host: 'http://localhost:3000',\n  mountPath: '/rails/active_storage',\n  headers: {}\n};\n\nexport const Context = createContext<ContextType>(defaultContext);\nexport const { Consumer, Provider } = Context;\n\nexport default Context;\n","import React from 'react';\nimport { Provider } from './Context';\n\ntype Props = {\n  host: string;\n  mountPath?: string;\n  headers?: object;\n}\n\nconst ActiveStorageProvider: React.FC<Props> = ({ host, mountPath, headers, children }) => (\n  <Provider value={{ host, mountPath, headers }}>{children}</Provider>\n);\n\nexport default ActiveStorageProvider;\n","import { useMemo, useState, useCallback } from 'react';\nimport { File, DirectUploadResult } from './types';\nimport directUpload from './lib/directUpload';\nimport insertOrReplace from './lib/insertOrReplace';\nimport useConfig from './useConfig';\n\ninterface OnSuccessParams {\n  signedIds: string[];\n}\n\nexport type Params = {\n  onSuccess?: (params: OnSuccessParams) => void;\n}\n\nconst useDirectUpload = ({ onSuccess }: Params = {}) => {\n  const { directUploadsUrl, headers } = useConfig();\n  const [uploads, setUploads] = useState<DirectUploadResult[]>([]);\n\n  const handleFileUploadChange = useCallback((fileUpload: DirectUploadResult) => {\n    setUploads((fileUploads) => insertOrReplace(fileUploads, fileUpload));\n  }, []);\n\n  const upload = useCallback(\n    async (files: File[]) => {\n      const signedIds = await Promise.all(\n        files.map((file) =>\n          directUpload({ file, directUploadsUrl, headers, onStatusChange: handleFileUploadChange })\n        )\n      );\n\n      const validIds = signedIds.filter((it) => !!it) as string[];\n      if (validIds.length > 0) {\n        onSuccess && onSuccess({ signedIds: validIds });\n      }\n\n      return { signedIds: validIds }\n    },\n    [handleFileUploadChange, onSuccess]\n  );\n\n  const isUploading = useMemo(() => uploads.some((upload) => upload.status === 'uploading'), [uploads]);\n\n  return {\n    upload,\n    uploads,\n    isUploading,\n    resetUploads: () => setUploads([]),\n    removeUpload: (id: number) => setUploads(uploads.filter(u => u.id !== id))\n  };\n};\n\nexport default useDirectUpload;\n","import { useContext } from 'react';\nimport Context from './Context';\n\nconst useConfig = () => {\n  const config = useContext(Context);\n  const mountPath = config.mountPath || '/rails/active_storage';\n\n  const url = `${config.host}${mountPath}`;\n\n  return {\n    ...config,\n    mountPath,\n    directUploadsUrl: `${url}/direct_uploads`,\n  }\n}\n\n\nexport default useConfig;\n","type Item = { [key: string]: any };\n\nconst insertOrReplace = <T extends Item>(list: T[], obj: T, key = 'id') => {\n  const newList = [...list];\n  const index = newList.findIndex((it) => it[key] === obj[key]);\n\n  if (index >= 0) {\n    newList[index] = obj;\n  } else {\n    newList.push(obj);\n  }\n\n  return newList;\n};\nexport default insertOrReplace;\n","import { ReactNode } from 'react';\nimport useDirectUpload, { Params } from './useDirectUpload';\n\ntype Props = {\n  children: (data: ReturnType<typeof useDirectUpload>) => ReactNode;\n} & Params\n\nconst DirectUpload = ({ children, onSuccess }: Props) => {\n  const data = useDirectUpload({ onSuccess });\n\n  return children(data);\n}\n\nexport default DirectUpload;\n"],"names":["checksum","path","RNFetchBlob","fs","hash","md5","hexArray","replace","split","map","it","parseInt","byteString","String","fromCharCode","btoa","id","directUpload","task","directUploadsUrl","file","headers","onStatusChange","taskId","canceled","handleCancel","cancel","handleStatusUpdate","data","status","Promise","resolve","getChecksum","Error","params","filename","name","content_type","type","byte_size","size","metadata","fetch","method","body","JSON","stringify","blob","Content-Type","response","json","createBlobRecord","blobData","direct_upload","url","uploadHeaders","fileData","wrap","uploadProgress","interval","uploadedBytes","totalBytes","progress","then","resp","info","signed_id","error","err","Context","createContext","host","mountPath","Provider","ActiveStorageProvider","React","value","children","useDirectUpload","config","onSuccess","useContext","useState","uploads","setUploads","handleFileUploadChange","useCallback","fileUpload","fileUploads","list","obj","key","newList","index","findIndex","push","insertOrReplace","upload","files","all","signedIds","validIds","filter","length","isUploading","useMemo","some","resetUploads","removeUpload","u","DirectUpload"],"mappings":"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"}