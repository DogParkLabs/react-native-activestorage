{"version":3,"file":"react-native-activestorage.modern.js","sources":["../src/lib/checksum.ts","../src/types.ts","../src/lib/directUpload.ts","../src/lib/createBlobRecord.ts","../src/Context.ts","../src/ActiveStorageProvider.tsx","../src/useDirectUpload.ts","../src/useConfig.ts","../src/lib/insertOrReplace.ts","../src/DirectUpload.tsx"],"sourcesContent":["import RNFetchBlob from 'rn-fetch-blob';\nimport { btoa } from 'abab';\n\nconst checksum = async ({ path }: { path: string }) => {\n  const md5 = await RNFetchBlob.fs.hash(path, 'md5');\n  const hexArray = md5.replace(/\\r|\\n/g, \"\")\n    .replace(/([\\da-fA-F]{2}) ?/g, \"0x$1 \")\n    .replace(/ +$/, \"\")\n    .split(\" \")\n    .map(it => parseInt(it));\n\n  const byteString = String.fromCharCode(...hexArray);\n\n  return btoa(byteString);\n}\n\nexport default checksum;\n","export type FileMetadata = { [key: string]: any };\n\nexport interface File {\n  name: string;\n  size: number;\n  type: string;\n  path: string;\n  metadata?: FileMetadata;\n}\n\nexport enum DirectUploadResultStatus {\n  success = 'success',\n  uploading = 'uploading',\n  error = 'error',\n  waiting = 'waiting',\n  canceled = 'canceled'\n}\n\nexport interface DirectUploadResultBase {\n  id: number;\n  status: DirectUploadResultStatus;\n  file: File;\n  cancel: () => void;\n}\n\nexport interface DirectUploadResultError extends DirectUploadResultBase {\n  status: DirectUploadResultStatus.error;\n  error: Error;\n}\n\nexport interface DirectUploadResultSuccess extends DirectUploadResultBase {\n  status: DirectUploadResultStatus.success;\n  signed_id: string;\n}\n\nexport interface DirectUploadResultWaiting extends DirectUploadResultBase {\n  status: DirectUploadResultStatus.waiting;\n}\n\nexport interface DirectUploadResultCanceled extends DirectUploadResultBase {\n  status: DirectUploadResultStatus.canceled;\n}\n\nexport interface DirectUploadResultUploading extends DirectUploadResultBase {\n  status: DirectUploadResultStatus.uploading;\n  progress: number;\n  totalBytes: number;\n  uploadedBytes: number;\n}\n\nexport type DirectUploadResult =\n  | DirectUploadResultError\n  | DirectUploadResultSuccess\n  | DirectUploadResultWaiting\n  | DirectUploadResultCanceled\n  | DirectUploadResultUploading;\n\ntype WithoutDirectUploadBaseParams<T> = Omit<T, 'id' | 'cancel' | 'file'>;\n\nexport type HandleStatusUpdateData =\n  | WithoutDirectUploadBaseParams<DirectUploadResultError>\n  | WithoutDirectUploadBaseParams<DirectUploadResultUploading>\n  | WithoutDirectUploadBaseParams<DirectUploadResultWaiting>\n  | WithoutDirectUploadBaseParams<DirectUploadResultCanceled>\n  | WithoutDirectUploadBaseParams<DirectUploadResultSuccess>;\n","import RNFetchBlob, { FetchBlobResponse, StatefulPromise } from 'rn-fetch-blob';\nimport createBlobRecord from './createBlobRecord';\nimport { File, DirectUploadResult, HandleStatusUpdateData, DirectUploadResultStatus } from '../types';\n\nlet id = 0;\n\ninterface DirectUploadParams {\n  directUploadsUrl: string;\n  file: File;\n  headers?: object;\n  onStatusChange: (data: DirectUploadResult) => void;\n}\n\nconst directUpload = ({ directUploadsUrl, file, headers, onStatusChange }: DirectUploadParams) => {\n  const taskId = ++id;\n  let canceled = false;\n  let task: StatefulPromise<FetchBlobResponse>;\n\n  const handleCancel = () => {\n    if (!task) {\n      return;\n    }\n\n    canceled = true;\n    task.cancel();\n  };\n\n  const handleStatusUpdate = (data: HandleStatusUpdateData) => {\n    onStatusChange({ ...data, id: taskId, cancel: handleCancel, file });\n  };\n\n  handleStatusUpdate({ status: DirectUploadResultStatus.waiting });\n\n  return new Promise<string | void>(async (resolve) => {\n    try {\n      const blobData = await createBlobRecord({\n        directUploadsUrl,\n        file,\n        headers,\n      });\n\n      const { url, headers: uploadHeaders } = blobData.direct_upload;\n\n      const fileData = RNFetchBlob.wrap(file.path);\n\n      task = RNFetchBlob.fetch('PUT', url, uploadHeaders, fileData);\n\n      task\n        .uploadProgress({ interval: 250 }, (uploadedBytes, totalBytes) => {\n          const progress = (uploadedBytes / totalBytes) * 100;\n          handleStatusUpdate({ status: DirectUploadResultStatus.uploading, progress, totalBytes, uploadedBytes });\n        })\n        .then((resp) => {\n          const status = resp.info().status;\n          if (status >= 200 && status < 400) {\n            handleStatusUpdate({ status: DirectUploadResultStatus.success, signed_id: blobData.signed_id });\n          } else {\n            handleStatusUpdate({ status: DirectUploadResultStatus.error, error: new Error('Response not success') });\n          }\n\n          resolve(blobData.signed_id);\n        })\n        .catch((err) => {\n          if (canceled) {\n            handleStatusUpdate({ status: DirectUploadResultStatus.canceled });\n          } else {\n            handleStatusUpdate({ status: DirectUploadResultStatus.error, error: err });\n          }\n\n          resolve();\n        });\n    } catch (err) {\n      handleStatusUpdate({ status: DirectUploadResultStatus.error, error: err });\n      return resolve();\n    }\n  });\n};\n\nexport default directUpload;\n","import getChecksum from './checksum';\nimport { File } from '../types';\n\ninterface CreateBlobRecordParams {\n  directUploadsUrl: string;\n  file: File;\n  headers?: object;\n}\n\ninterface BlobParams {\n  filename: string;\n  content_type: string;\n  byte_size: number;\n  checksum: string;\n  metadata?: object;\n}\n\nconst createBlobRecord = async ({ directUploadsUrl, file, headers = {} }: CreateBlobRecordParams) => {\n  const checksum = await getChecksum({ path: file.path });\n\n  if (!checksum) {\n    throw new Error(`Failed to get file checksum. Path: ${file.path}`)\n  }\n\n  const params: BlobParams = {\n    filename: file.name,\n    content_type: file.type || 'image/jpeg',\n    byte_size: file.size,\n    checksum,\n  }\n\n  if (file.metadata) {\n    params.metadata = file.metadata;\n  }\n\n  const response = await fetch(directUploadsUrl, {\n    method: 'POST',\n    body: JSON.stringify({ blob: params }),\n    headers: { 'Content-Type': 'application/json', ...headers },\n  });\n\n  return response.json();\n}\n\nexport default createBlobRecord;\n","import { createContext } from 'react';\n\ntype ContextType = {\n  host: string;\n  mountPath?: string;\n  headers?: object;\n}\n\nconst defaultContext = {\n  host: 'http://localhost:3000',\n  mountPath: '/rails/active_storage',\n  headers: {}\n};\n\nexport const Context = createContext<ContextType>(defaultContext);\nexport const { Consumer, Provider } = Context;\n\nexport default Context;\n","import React from 'react';\nimport { Provider } from './Context';\n\ntype Props = {\n  host: string;\n  mountPath?: string;\n  headers?: object;\n}\n\nconst ActiveStorageProvider: React.FC<Props> = ({ host, mountPath, headers, children }) => (\n  <Provider value={{ host, mountPath, headers }}>{children}</Provider>\n);\n\nexport default ActiveStorageProvider;\n","import { useMemo, useState, useCallback } from 'react';\nimport { File, DirectUploadResult, DirectUploadResultSuccess, DirectUploadResultStatus } from './types';\nimport directUpload from './lib/directUpload';\nimport insertOrReplace from './lib/insertOrReplace';\nimport useConfig from './useConfig';\n\ninterface OnSuccessParams {\n  signedIds: string[];\n}\n\nexport type Params = {\n  onSuccess?: (params: OnSuccessParams) => void;\n  onError?: () => void;\n}\n\nconst useDirectUpload = ({ onSuccess, onError }: Params = {}) => {\n  const { directUploadsUrl, headers } = useConfig();\n  const [uploads, setUploads] = useState<DirectUploadResult[]>([]);\n\n  const handleFileUploadChange = useCallback((fileUpload: DirectUploadResult) => {\n    setUploads((fileUploads) => insertOrReplace(fileUploads, fileUpload));\n  }, []);\n\n  const upload = useCallback(\n    async (files: File[]) => {\n      const signedIds = await Promise.all(\n        files.map((file) =>\n          directUpload({ file, directUploadsUrl, headers, onStatusChange: handleFileUploadChange })\n        )\n      );\n\n      const validIds = signedIds.filter((it) => !!it) as string[];\n      if (validIds.length > 0) {\n        onSuccess && onSuccess({ signedIds: validIds });\n      }\n\n      if (files.length > validIds.length) {\n        onError && onError();\n      }\n\n      return { signedIds: validIds }\n    },\n    [handleFileUploadChange, onSuccess, onError]\n  );\n\n  const isUploading = useMemo(() => (\n    uploads.some((upload) => upload.status === DirectUploadResultStatus.uploading)\n  ), [uploads]);\n  const successfulUploads = useMemo(() => (\n    uploads.filter((upload) => upload.status === DirectUploadResultStatus.success) as DirectUploadResultSuccess[]\n  ), [uploads]);\n\n  return {\n    upload,\n    uploads,\n    isUploading,\n    successfulUploads,\n    resetUploads: () => setUploads([]),\n    removeUpload: (id: number) => setUploads(uploads.filter(u => u.id !== id))\n  };\n};\n\nexport default useDirectUpload;\n","import { useContext } from 'react';\nimport Context from './Context';\n\nconst useConfig = () => {\n  const config = useContext(Context);\n  const mountPath = config.mountPath || '/rails/active_storage';\n\n  const url = `${config.host}${mountPath}`;\n\n  return {\n    ...config,\n    mountPath,\n    directUploadsUrl: `${url}/direct_uploads`,\n  }\n}\n\n\nexport default useConfig;\n","type Item = { [key: string]: any };\n\nconst insertOrReplace = <T extends Item>(list: T[], obj: T, key = 'id') => {\n  const newList = [...list];\n  const index = newList.findIndex((it) => it[key] === obj[key]);\n\n  if (index >= 0) {\n    newList[index] = obj;\n  } else {\n    newList.push(obj);\n  }\n\n  return newList;\n};\nexport default insertOrReplace;\n","import { ReactNode } from 'react';\nimport useDirectUpload, { Params } from './useDirectUpload';\n\ntype Props = {\n  children: (data: ReturnType<typeof useDirectUpload>) => ReactNode;\n} & Params\n\nconst DirectUpload = ({ children, onSuccess }: Props) => {\n  const data = useDirectUpload({ onSuccess });\n\n  return children(data);\n}\n\nexport default DirectUpload;\n"],"names":["checksum","async","path","hexArray","RNFetchBlob","fs","hash","replace","split","map","it","parseInt","byteString","String","fromCharCode","btoa","DirectUploadResultStatus","id","directUpload","directUploadsUrl","file","headers","onStatusChange","taskId","task","canceled","handleCancel","cancel","handleStatusUpdate","data","status","waiting","Promise","blobData","getChecksum","Error","params","filename","name","content_type","type","byte_size","size","metadata","fetch","method","body","JSON","stringify","blob","Content-Type","json","createBlobRecord","url","uploadHeaders","direct_upload","fileData","wrap","uploadProgress","interval","uploadedBytes","totalBytes","uploading","progress","then","resp","info","success","signed_id","error","resolve","catch","err","Context","createContext","host","mountPath","Provider","ActiveStorageProvider","children","React","value","useDirectUpload","onSuccess","onError","config","useContext","useConfig","uploads","setUploads","useState","handleFileUploadChange","useCallback","fileUpload","fileUploads","list","obj","key","newList","index","findIndex","push","insertOrReplace","upload","validIds","all","files","filter","length","signedIds","isUploading","useMemo","some","successfulUploads","resetUploads","removeUpload","u","DirectUpload"],"mappings":"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"}