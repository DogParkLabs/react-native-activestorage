import e from"rn-fetch-blob";import{btoa as t}from"abab";import r,{createContext as s,useContext as a,useState as o,useCallback as n,useMemo as c}from"react";const i=async({path:r})=>{const s=(await e.fs.hash(r,"md5")).replace(/\r|\n/g,"").replace(/([\da-fA-F]{2}) ?/g,"0x$1 ").replace(/ +$/,"").split(" ").map(e=>parseInt(e)),a=String.fromCharCode(...s);return t(a)};function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e}).apply(this,arguments)}var d;!function(e){e.success="success",e.uploading="uploading",e.error="error",e.waiting="waiting",e.canceled="canceled"}(d||(d={}));let u=0;const p=({directUploadsUrl:t,file:r,headers:s,onStatusChange:a})=>{const o=++u;let n,c=!1;const p=()=>{n&&(c=!0,n.cancel())},h=e=>{a(l({},e,{id:o,cancel:p,file:r}))};return h({status:d.waiting}),new Promise(async a=>{try{const o=await(async({directUploadsUrl:e,file:t,headers:r={}})=>{const s=await i({path:t.path});if(!s)throw new Error(`Failed to get file checksum. Path: ${t.path}`);const a={filename:t.name,content_type:t.type||"image/jpeg",byte_size:t.size,checksum:s};return t.metadata&&(a.metadata=t.metadata),(await fetch(e,{method:"POST",body:JSON.stringify({blob:a}),headers:l({"Content-Type":"application/json"},r)})).json()})({directUploadsUrl:t,file:r,headers:s}),{url:u,headers:p}=o.direct_upload,g=e.wrap(r.path);n=e.fetch("PUT",u,p,g),n.uploadProgress({interval:250},(e,t)=>{h({status:d.uploading,progress:e/t*100,totalBytes:t,uploadedBytes:e})}).then(e=>{const t=e.info().status;h(t>=200&&t<400?{status:d.success,signed_id:o.signed_id}:{status:d.error,error:new Error("Response not success")}),a(o.signed_id)}).catch(e=>{h(c?{status:d.canceled}:{status:d.error,error:e}),a()})}catch(e){return h({status:d.error,error:e}),a()}})},h=s({host:"http://localhost:3000",mountPath:"/rails/active_storage",headers:{}}),{Provider:g}=h,f=({host:e,mountPath:t,headers:s,children:a})=>r.createElement(g,{value:{host:e,mountPath:t,headers:s}},a),m=({onSuccess:e,onError:t}={})=>{const{directUploadsUrl:r,headers:s}=(()=>{const e=a(h),t=e.mountPath||"/rails/active_storage";return l({},e,{mountPath:t,directUploadsUrl:`${e.host}${t}/direct_uploads`})})(),[i,u]=o([]),g=n(e=>{u(t=>((e,t,r="id")=>{const s=[...e],a=s.findIndex(e=>e[r]===t[r]);return a>=0?s[a]=t:s.push(t),s})(t,e))},[]),f=n(async a=>{const o=(await Promise.all(a.map(e=>p({file:e,directUploadsUrl:r,headers:s,onStatusChange:g})))).filter(e=>!!e);return o.length>0&&e&&e({signedIds:o}),a.length>o.length&&t&&t(),{signedIds:o}},[g,e,t]),m=c(()=>i.some(e=>e.status===d.uploading),[i]),U=c(()=>i.filter(e=>e.status===d.success),[i]);return{upload:f,uploads:i,isUploading:m,successfulUploads:U,resetUploads:()=>u([]),removeUpload:e=>u(i.filter(t=>t.id!==e))}},U=({children:e,onSuccess:t})=>e(m({onSuccess:t}));export{f as ActiveStorageProvider,U as DirectUpload,i as checksum,p as directUpload,m as useDirectUpload};
//# sourceMappingURL=react-native-activestorage.modern.js.map
